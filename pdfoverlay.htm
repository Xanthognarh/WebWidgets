<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>PDF Viewer</title>
    <style>
		body{
			margin:0;
			background-color: rgba(0,0,0,0);
		}
        #canvas-container {
            position: relative;
        }
        canvas {
            border: 0px solid white;
			background-color:green;
            display: block;
        }
		#All{
			width:100%;
			height:100%;
			position:absolute;
			display:flex;
			align-items:flex-end;
			justify-content:center;
		}
    </style>
	<script src="Scripts/tmi.min.js"></script>
    <script type="module" src="https://cdn.jsdelivr.net/npm/pdfjs-dist@5/build/pdf.min.mjs"></script>
</head>
<body onclick="document.getElementById('fileInput').click();">
<div id="All">
    <input type="file" id="fileInput" style="display: none;" accept="application/pdf">
    <div id="canvas-container">
        <canvas id="pdfCanvas"></canvas>
    </div>
</div>
    <script type="module" >
const DisableCommand="!hidepdf";
const EnableCommand="!showpdf";
const NextCommand="!pdf+";
const PreviousCommand="!pdf-";
const SetPageCommand="!pdf";
const RotatePageCommand="!pdfrotation";
const SetScaleCommand="!pdfzoom";
const SetPosCommand="!pdfpos";

let rotationangle=0;
let zoom=0;

const extraMods=[]; //only lower-case usernames (like in the url): extraMods=["name1","name2"];

const siteURL=new URL(window.location);
const TwitchChannel=siteURL.searchParams.get("channel").toLowerCase().split(",");	
let pos=siteURL.searchParams.get("pos");
if (pos==null){pos="7"}
	
	
import { getDocument } from 'https://cdn.jsdelivr.net/npm/pdfjs-dist@5/build/pdf.min.mjs';
pdfjsLib.GlobalWorkerOptions.workerSrc ='https://cdn.jsdelivr.net/npm/pdfjs-dist@5/build/pdf.worker.min.mjs';

let pdfDoc = null;
let currentPage = 1;
const pdfCanvas = document.getElementById('pdfCanvas');
const All=document.getElementById('All');
document.getElementById('fileInput').addEventListener('change', loadPDF);

async function loadPDF(event) {
	const file = event.target.files[0];
	if (file) {
		const fileURL = URL.createObjectURL(file);
		pdfDoc = await pdfjsLib.getDocument(fileURL).promise;
		currentPage = 1;
		renderPage(currentPage);
		ChangePosition(pos);
	}
}
async function renderPage(num) {
	const page = await pdfDoc.getPage(num);
	const desiredHeight = window.screen.availHeight ;
	const desiredWidth = window.screen.availWidth ;
	const viewport = page.getViewport({ scale: 1, rotation: rotationangle});
	let scale = Math.min(desiredHeight / viewport.height, desiredWidth / viewport.width);
	if (zoom!=0){ 
		scale=zoom*scale/100;
	}
	const scaledViewport = page.getViewport({ scale: scale, rotation: rotationangle});

	pdfCanvas.width = scaledViewport.width;
	pdfCanvas.height = scaledViewport.height;
	console.log("Render Page "+num+" with scale "+scale+" and rotation "+rotationangle);
	await page.render({canvasContext: pdfCanvas.getContext('2d'), viewport: scaledViewport}).promise;
}

function nextPage(amount=1) {
	console.log("Next "+amount);
	if (pdfDoc){
		if (currentPage+amount <= pdfDoc.numPages) {
		currentPage+=amount;
		}else{
			currentPage=pdfDoc.numPages;
		}
	renderPage(currentPage);
	}
}

function previousPage(amount=1) {
	console.log("Previous "+amount);
	if (pdfDoc){
		if (currentPage-amount >1) {
		currentPage-=amount;
		}else{
			currentPage=1;
		}
	renderPage(currentPage);
	}
}

function jumpToPage(pageNum) {
	if (pdfDoc && pageNum > 0 && pageNum <= pdfDoc.numPages) {
		currentPage = pageNum;
		renderPage(currentPage);
	}
}

function rotate(angle){
	if (pdfDoc){
		switch(angle){
			case 0:
			case 360:
			case 4:
			rotationangle=0;
			break;
			case 1:
			case 90:
			rotationangle=90;
			break;
			case 2:
			case 180:
			rotationangle=180;
			break;
			case 3:
			case 270:
			rotationangle=270;
			break;
		}
		renderPage(currentPage);
	}
}

function fixedscale(val=0){
	zoom=val;
	renderPage(currentPage);
}

function ChangePosition(text){
	let offsetx=text.split(" ")[1]*1;
	let offsety=text.split(" ")[2]*1;
	if (isNaN(offsety)){offsety=0;}
	if (isNaN(offsetx)){offsetx=0;}
	const margin="0%";
	pos=text[0]*1;
	switch (pos){
		case 7:
			All.style.alignItems="flex-start";
			All.style.justifyContent="flex-start";
			pdfCanvas.style.marginLeft="calc("+margin+" + "+offsetx+"px)";
			pdfCanvas.style.marginTop="calc("+margin+" + "+offsety+"px)";
			pdfCanvas.style.marginRight=margin;
			pdfCanvas.style.marginBottom=margin;
			break;
		case 8:
			All.style.alignItems="flex-start";
			All.style.justifyContent="center";
			pdfCanvas.style.marginLeft="calc("+margin+" + "+offsetx+"px)";
			pdfCanvas.style.marginTop="calc("+margin+" + "+offsety+"px)";
			pdfCanvas.style.marginRight=margin;
			pdfCanvas.style.marginBottom=margin;
			break;
		case 9:
			All.style.alignItems="flex-start";
			All.style.justifyContent="flex-end";
			pdfCanvas.style.marginLeft=margin;
			pdfCanvas.style.marginTop="calc("+margin+" + "+offsety+"px)";
			pdfCanvas.style.marginRight="calc("+margin+" - "+offsetx+"px)";
			pdfCanvas.style.marginBottom=margin;
			break;
			
		case 4:
			All.style.alignItems="center";
			All.style.justifyContent="flex-start";
			pdfCanvas.style.marginLeft="calc("+margin+" + "+offsetx+"px)";
			pdfCanvas.style.marginTop="calc("+margin+" + "+offsety+"px)";
			pdfCanvas.style.marginRight=margin;
			pdfCanvas.style.marginBottom=margin;
			break;
		case 5:
			All.style.alignItems="center";
			All.style.justifyContent="center";
			pdfCanvas.style.marginLeft="calc("+margin+" + "+offsetx+"px)";
			pdfCanvas.style.marginTop="calc("+margin+" + "+offsety+"px)";
			pdfCanvas.style.marginRight=margin;
			pdfCanvas.style.marginBottom=margin;
			break;
		case 6:
			All.style.alignItems="center";
			All.style.justifyContent="flex-end";
			pdfCanvas.style.marginLeft=margin;
			pdfCanvas.style.marginTop="calc("+margin+" + "+offsety+"px)";
			pdfCanvas.style.marginRight="calc("+margin+" - "+offsetx+"px)";
			pdfCanvas.style.marginBottom=margin;
			break;
		
		case 1:
			All.style.alignItems="flex-end";
			All.style.justifyContent="flex-start";
			pdfCanvas.style.marginLeft="calc("+margin+" + "+offsetx+"px)";
			pdfCanvas.style.marginTop=margin;
			pdfCanvas.style.marginRight=margin;
			pdfCanvas.style.marginBottom="calc("+margin+" - "+offsety+"px)";
			break;
		case 2:
			All.style.alignItems="flex-end";
			All.style.justifyContent="center";
			pdfCanvas.style.marginLeft="calc("+margin+" + "+offsetx+"px)";
			pdfCanvas.style.marginTop=margin;
			pdfCanvas.style.marginRight=margin;
			pdfCanvas.style.marginBottom="calc("+margin+" - "+offsety+"px)";
			break;
		case 3:
			All.style.alignItems="flex-end";
			All.style.justifyContent="flex-end";
			pdfCanvas.style.marginLeft=margin;
			pdfCanvas.style.marginTop=margin;
			pdfCanvas.style.marginRight="calc("+margin+" - "+offsetx+"px)";
			pdfCanvas.style.marginBottom="calc("+margin+" - "+offsety+"px)";
			break;
	}
}


//Connect to Twitchchat:
const client = new tmi.Client({
	options: { debug: false },
	channels: TwitchChannel
});
client.connect().catch(console.error);
client.on('message', (channel, user, message, self) => {
	// "Alca: Hello, World!"
	if (user.mod || extraMods.includes(user['display-name'].toLowerCase()) || TwitchChannel.includes("#"+user['display-name'].toLowerCase())){
		//Authorised Users (Twitch Mods, extraMods, Broadcaster or in case of debug-mode: everyone)
		switch (message.split(" ")[0]){
			case EnableCommand:
				pdfCanvas.style.visibility = "visible";
				break;
			case DisableCommand:
				pdfCanvas.style.visibility = "hidden";
				break;
			case NextCommand:
				if (isNaN(message.split(" ")[1]*1)){nextPage();}else{nextPage(message.split(" ")[1]*1);}
				break;
			case PreviousCommand:
				if (isNaN(message.split(" ")[1]*1)){previousPage();}else{previousPage(message.split(" ")[1]*1);}
				break;	
			case SetPageCommand:
				if (isNaN(message.split(" ")[1]*1)){break;}
				jumpToPage(message.split(" ")[1]*1);
				break;
			case RotatePageCommand:
				if (isNaN(message.split(" ")[1]*1)){break;}
				rotate(message.split(" ")[1]*1);
				break;
			case SetScaleCommand:
				let val=message.split(" ")[1].replace(",",".");
				if (isNaN(val*1)){fixedscale(0);break;}
				fixedscale(val*1);
				break;
			case SetPosCommand:
				const text=message.substr(SetPosCommand.length +1).trim();
				
				ChangePosition(text);					
				if (text[0]*1==0){
					All.style.backgroundColor="black";
				}else{
					All.style.backgroundColor="rgba(0,0,0,0)";
				}
				break;
		}
	}
});
	</script>
</body>
</html>
