<!DOCTYPE html>
<!--
Config via URL-Parameters:
- `channel`: Name of Twich Channel you want to listen
- `c1`: r,g,b,a value  for the background-color (0-255) and alpha (0-1) [default: white (0,0,0,0.7)]
- `c2`: r,g,b,a value  for the font-color (0-255) and alpha (0-1) [default: white (255,255,255,1)]
use them like: Overlay.htm?channel=Testchannel
-->
<html>
	<header>
		<title>Xanthoview</title>
	</header>
	<script src="Scripts/tmi.min.js"></script>
	<style>
		body{
			margin:0;
		}
		#Overlay{
			font-size: 20pt;
			margin:2%;
		}
		#All{
			width:100%;
			height:100%;
			position:absolute;
			display:flex;
			align-items:flex-end;
			justify-content:center;
		}
		td{
			padding:5px;
		}
	</style>
	<body>
		<div id="All">
		<div id="Overlay">
			<table id="Table">
			</table>
		</div>
		</div>
	</body>
	<script>
		ShowOverlay="!showoverlay";
		HideOverlay="!hideoverlay";
		SetOverlay="!overlay";
		SetPos="!overlaypos";
		SetScale="!overlayscale";
		SetColor="!overlaycolor";
		
		siteURL=new URL(window.location);
		TwitchChannel=siteURL.searchParams.get("channel");
		
		c1=siteURL.searchParams.get("c1");
		if (c1==null){c1="0,0,0,0.7"}
		document.getElementById("Overlay").style.backgroundColor="rgba("+c1+")";
		c2=siteURL.searchParams.get("c2");
		if (c2==null){c2="255,255,255,1"}
		document.getElementById("Overlay").style.color="rgba("+c2+")";
		
		hidden=false;
		
		//Connect to Twitchchat:
		const client = new tmi.Client({
			options: { debug: false },
			channels: [ TwitchChannel ]
		});
		client.connect().catch(console.error);
		client.on('message', (channel, user, message, self) => {
		// "Alca: Hello, World!"
		if (user.mod || user['display-name']=="Xanthognarh" || user['display-name'].toLowerCase()==TwitchChannel.toLowerCase()){
			//Authorised Users
			switch (message.split(" ")[0]){
				case ShowOverlay:
					document.getElementById("Overlay").style.visibility = "visible";
					hidden=false;
					break;
				case HideOverlay:
					document.getElementById("Overlay").style.visibility = "hidden";
					hidden=true;
					break;
				case SetOverlay:
					document.getElementById("Overlay").style.visibility = "visible";
					hidden=false;
					text=message.substr(SetOverlay.length +1);
					document.getElementById("Table").innerText=text;
					text=document.getElementById("Table").innerText;
					html = "<tr><td>"+text.replaceAll("|","</td><td>").replaceAll("\\","</td></tr><tr><td>")+"</td></tr>";
					html=html.replaceAll("<td>!!","<td colspan='999'>").replaceAll("<td> !!","<td colspan='999'>");//Normal Text
					document.getElementById("Table").innerHTML=html;
					//document.getElementById("Table").deleteRow(-1);
					break;
				case SetPos:
					text=message.substr(SetPos.length +1).trim();
					pos=document.getElementById("Overlay").style;
					
					offsety=text.split(" ")[1]*1;
					offsetx=text.split(" ")[2]*1;
					if (isNaN(offsety)){offsety=0;}
					if (isNaN(offsetx)){offsetx=0;}
					console.log("Set Pos, ox="+offsetx+" and oy="+offsety+" | Pos="+text[0]);
					margin="2%";
					switch (text[0]*1){
						case 7:
							All.style.alignItems="flex-start";
							All.style.justifyContent="flex-start";
							Overlay.style.marginLeft="calc("+margin+" + "+offsetx+"px)";
							Overlay.style.marginTop="calc("+margin+" + "+offsety+"px)";
							Overlay.style.marginRight=margin;
							Overlay.style.marginBottom=margin;
							break;
						case 8:
							All.style.alignItems="flex-start";
							All.style.justifyContent="center";
							Overlay.style.marginLeft="calc("+margin+" + "+offsetx+"px)";
							Overlay.style.marginTop="calc("+margin+" + "+offsety+"px)";
							Overlay.style.marginRight=margin;
							Overlay.style.marginBottom=margin;
							break;
						case 9:
							All.style.alignItems="flex-start";
							All.style.justifyContent="flex-end";
							Overlay.style.marginLeft=margin;
							Overlay.style.marginTop="calc("+margin+" + "+offsety+"px)";
							Overlay.style.marginRight="calc("+margin+" - "+offsetx+"px)";
							Overlay.style.marginBottom=margin;
							break;
							
						case 4:
							All.style.alignItems="center";
							All.style.justifyContent="flex-start";
							Overlay.style.marginLeft="calc("+margin+" + "+offsetx+"px)";
							Overlay.style.marginTop="calc("+margin+" + "+offsety+"px)";
							Overlay.style.marginRight=margin;
							Overlay.style.marginBottom=margin;
							break;
						case 5:
							All.style.alignItems="center";
							All.style.justifyContent="center";
							Overlay.style.marginLeft="calc("+margin+" + "+offsetx+"px)";
							Overlay.style.marginTop="calc("+margin+" + "+offsety+"px)";
							Overlay.style.marginRight=margin;
							Overlay.style.marginBottom=margin;
							break;
						case 6:
							All.style.alignItems="center";
							All.style.justifyContent="flex-end";
							Overlay.style.marginLeft=margin;
							Overlay.style.marginTop="calc("+margin+" + "+offsety+"px)";
							Overlay.style.marginRight="calc("+margin+" - "+offsetx+"px)";
							Overlay.style.marginBottom=margin;
							break;
						
						case 1:
							All.style.alignItems="flex-end";
							All.style.justifyContent="flex-start";
							Overlay.style.marginLeft="calc("+margin+" + "+offsetx+"px)";
							Overlay.style.marginTop=margin;
							Overlay.style.marginRight=margin;
							Overlay.style.marginBottom="calc("+margin+" - "+offsety+"px)";
							break;
						case 2:
							All.style.alignItems="flex-end";
							All.style.justifyContent="center";
							Overlay.style.marginLeft="calc("+margin+" + "+offsetx+"px)";
							Overlay.style.marginTop=margin;
							Overlay.style.marginRight=margin;
							Overlay.style.marginBottom="calc("+margin+" - "+offsety+"px)";
							break;
						case 3:
							All.style.alignItems="flex-end";
							All.style.justifyContent="flex-end";
							Overlay.style.marginLeft=margin;
							Overlay.style.marginTop=margin;
							Overlay.style.marginRight="calc("+margin+" - "+offsetx+"px)";
							Overlay.style.marginBottom="calc("+margin+" - "+offsety+"px)";
							break;
					}
					if (text[0]*1==0){
						All.style.backgroundColor="black";
					}else{
						All.style.backgroundColor="rgba(0,0,0,0)";
					}
					break;
				case SetScale:
					scale=message.substr(SetScale.length +1)*1;
					if (isNaN(scale)){scale=1;}
					Overlay.style.scale=scale;
					break;
				case SetColor:
					color1=message.substr(SetColor.length +1).split(" ")[0];
					color2=message.substr(SetColor.length +1).split(" ")[1];
					if (color1!="-"){
						Overlay.style.backgroundColor=color1;
					}
					if (color2!="-" && color2!=undefined){
						Overlay.style.color=color2;
					}
					break;
			}
		}
		//console.log(`${user['display-name']}: ${message}`);
	});
	</script>
</html>