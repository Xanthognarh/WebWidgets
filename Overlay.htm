<!DOCTYPE html>
<!--
Config via URL-Parameters:
- `channel`: Name of Twich Channel you want to listen
- `c1`: r,g,b,a value  for the background-color (0-255) and alpha (0-1) [default: white (0,0,0,0.7)]
- `c2`: r,g,b,a value  for the font-color (0-255) and alpha (0-1) [default: white (255,255,255,1)]
- `font`: Set the font-family. Use " for font names with spaces. You can add fallback fonts (e. g. `!overlayfont Georgia, "Times New Roman", serif`). Use `!overlayfont 1-6` to use a font from this list:["Helvetica","'Times New Roman'","'Segoe UI'","'Courier New'","'Brush Script MT'","'Papyrus'"]
- `pos`: pos [offset-x] [offset-y] value for the default position (pos Number 1-9 from Numpad) and optionally offset by the given values in pixel.
use them like: Overlay.htm?channel=Testchannel
-->
<html>
	<header>
		<title>Xanthoview</title>
	</header>
	<script src="Scripts/tmi.min.js"></script>
	<style>
		body{
			margin:0;
			background-color: rgba(0,0,0,0);
		}
		#Overlay{
			font-size: 20pt;
			margin:2%;
		}
		#All{
			width:100%;
			height:100%;
			position:absolute;
			display:flex;
			align-items:flex-end;
			justify-content:center;
		}
		td{
			padding:5px;
			vertical-align:bottom;
		}
		img{
			height:1.5em;
		}
		#test{
			visibility:hidden;
			font-size: 20pt;
		}
	</style>
	<body>
		<div id="All">
		<div id="Overlay">
			<table id="Table">
			</table>
		</div>
		</div>
		<div id="test">
			ABCDEFGHIJKLMNOPQRSTUVWXYZ-1234567890
		</div>
	</body>
	<script>
		ShowOverlay="!showoverlay";
		HideOverlay="!hideoverlay";
		SetOverlay="!overlay";
		SetPos="!overlaypos";
		SetScale="!overlayscale";
		SetColor="!overlaycolor";
		SetFont="!overlayfont";
		
		fontlist=["Helvetica","'Times New Roman'","'Segoe UI'","'Courier New'","'Brush Script MT'","'Papyrus'"];
		
		siteURL=new URL(window.location);
		TwitchChannel=siteURL.searchParams.get("channel");
		
		c1=siteURL.searchParams.get("c1");
		if (c1==null){c1="0,0,0,0.7"}
		document.getElementById("Overlay").style.backgroundColor="rgba("+c1+")";
		c2=siteURL.searchParams.get("c2");
		if (c2==null){c2="255,255,255,1"}
		document.getElementById("Overlay").style.color="rgba("+c2+")";
		font=siteURL.searchParams.get("font");
		if (font==null){font="Helvetica"}
		if (!isNaN(font*1)){
			font=fontlist[font*1 -1];
		}
		Overlay.style.fontFamily=font+", Helvetica, sans-serif";
		test.style.fontFamily=font+", Helvetica, sans-serif";
		pos=siteURL.searchParams.get("pos");
		if (pos==null){pos="2"}	
		
		
		function replaceEmotes(message,emotesRaw){
			if (emotesRaw==null || emotesRaw.length==0){
				return message;
			}
			emotes=emotesRaw.split("/");
			emotearray=[];
			for (emote of emotes){
				url=emote.split(":")[0];
				posa=emote.split(":")[1].split("-")[0]*1;
				posb=emote.split(":")[1].split("-")[1]*1;
				emotearray.push([posa,posb,url]);
			}
			//Sort emotes, because they are random in tmi
			emotearray = emotearray.sort((a, b) => a[0] - b[0]);
			emotearray.reverse();
			for (emote of emotearray){
				//https://static-cdn.jtvnw.net/emoticons/v2/{url}/default/light/3.0
				message=message.substring(0,emote[0])+"<img src='https://static-cdn.jtvnw.net/emoticons/v2/"+emote[2]+"/default/light/3.0'>"+message.substring(emote[1]+1);
			}
			return message;			
		}
		function AdjustImageHeight(){
			height=document.getElementById("test").clientHeight;
			imgs = document.getElementsByTagName('img');
			for (var i = 0; i < imgs.length; i++) {
			  var element = imgs[i];
			  element.style.height = height+"px";
			}
		}
		AdjustImageHeight();
		function ChangePosition(text){
			offsety=text.split(" ")[1]*1;
			offsetx=text.split(" ")[2]*1;
			if (isNaN(offsety)){offsety=0;}
			if (isNaN(offsetx)){offsetx=0;}
			margin="2%";
			switch (text[0]*1){
				case 7:
					All.style.alignItems="flex-start";
					All.style.justifyContent="flex-start";
					Overlay.style.marginLeft="calc("+margin+" + "+offsetx+"px)";
					Overlay.style.marginTop="calc("+margin+" + "+offsety+"px)";
					Overlay.style.marginRight=margin;
					Overlay.style.marginBottom=margin;
					break;
				case 8:
					All.style.alignItems="flex-start";
					All.style.justifyContent="center";
					Overlay.style.marginLeft="calc("+margin+" + "+offsetx+"px)";
					Overlay.style.marginTop="calc("+margin+" + "+offsety+"px)";
					Overlay.style.marginRight=margin;
					Overlay.style.marginBottom=margin;
					break;
				case 9:
					All.style.alignItems="flex-start";
					All.style.justifyContent="flex-end";
					Overlay.style.marginLeft=margin;
					Overlay.style.marginTop="calc("+margin+" + "+offsety+"px)";
					Overlay.style.marginRight="calc("+margin+" - "+offsetx+"px)";
					Overlay.style.marginBottom=margin;
					break;
					
				case 4:
					All.style.alignItems="center";
					All.style.justifyContent="flex-start";
					Overlay.style.marginLeft="calc("+margin+" + "+offsetx+"px)";
					Overlay.style.marginTop="calc("+margin+" + "+offsety+"px)";
					Overlay.style.marginRight=margin;
					Overlay.style.marginBottom=margin;
					break;
				case 5:
					All.style.alignItems="center";
					All.style.justifyContent="center";
					Overlay.style.marginLeft="calc("+margin+" + "+offsetx+"px)";
					Overlay.style.marginTop="calc("+margin+" + "+offsety+"px)";
					Overlay.style.marginRight=margin;
					Overlay.style.marginBottom=margin;
					break;
				case 6:
					All.style.alignItems="center";
					All.style.justifyContent="flex-end";
					Overlay.style.marginLeft=margin;
					Overlay.style.marginTop="calc("+margin+" + "+offsety+"px)";
					Overlay.style.marginRight="calc("+margin+" - "+offsetx+"px)";
					Overlay.style.marginBottom=margin;
					break;
				
				case 1:
					All.style.alignItems="flex-end";
					All.style.justifyContent="flex-start";
					Overlay.style.marginLeft="calc("+margin+" + "+offsetx+"px)";
					Overlay.style.marginTop=margin;
					Overlay.style.marginRight=margin;
					Overlay.style.marginBottom="calc("+margin+" - "+offsety+"px)";
					break;
				case 2:
					All.style.alignItems="flex-end";
					All.style.justifyContent="center";
					Overlay.style.marginLeft="calc("+margin+" + "+offsetx+"px)";
					Overlay.style.marginTop=margin;
					Overlay.style.marginRight=margin;
					Overlay.style.marginBottom="calc("+margin+" - "+offsety+"px)";
					break;
				case 3:
					All.style.alignItems="flex-end";
					All.style.justifyContent="flex-end";
					Overlay.style.marginLeft=margin;
					Overlay.style.marginTop=margin;
					Overlay.style.marginRight="calc("+margin+" - "+offsetx+"px)";
					Overlay.style.marginBottom="calc("+margin+" - "+offsety+"px)";
					break;
			}
		}
		ChangePosition(pos);
		
		
		hidden=false;
		lastmessage="";
		//Connect to Twitchchat:
		const client = new tmi.Client({
			options: { debug: false },
			channels: [ TwitchChannel ]
		});
		client.connect().catch(console.error);
		client.on('message', (channel, user, message, self) => {
		// "Alca: Hello, World!"
		//console.log(`${user['display-name']}: ${message}`);

		lastmessage=user;
		if (user.mod || user['display-name']=="Xanthognarh" || user['display-name'].toLowerCase()==TwitchChannel.toLowerCase()){
			//Authorised Users
			switch (message.split(" ")[0]){
				case ShowOverlay:
					document.getElementById("Overlay").style.visibility = "visible";
					hidden=false;
					break;
				case HideOverlay:
					document.getElementById("Overlay").style.visibility = "hidden";
					hidden=true;
					break;
				case SetOverlay:
					document.getElementById("Overlay").style.visibility = "visible";
					hidden=false;
					text=replaceEmotes(message,user["emotes-raw"]);
					text=text.substr(SetOverlay.length +1);
					
					document.getElementById("Table").innerText=text;
					text=document.getElementById("Table").innerText;//sanitize?
					text=text.replaceAll("<","&lt;").replaceAll(">","&gt;");
					html = "<tr><td>"+text.replaceAll("|","</td><td>").replaceAll("\\","</td></tr><tr><td>")+"</td></tr>";
					html=html.replaceAll("<td>!!","<td colspan='999'>").replaceAll("<td> !!","<td colspan='999'>");//Normal Text
					html=html.replaceAll("&lt;img src='https://static-cdn.jtvnw.net/emoticons","<img src='https://static-cdn.jtvnw.net/emoticons");
					html=html.replaceAll("/default/light/3.0'&gt;","/default/light/3.0'>");
					
					document.getElementById("Table").innerHTML=html;
					//document.getElementById("Table").deleteRow(-1);
					break;
				case SetPos:
					text=message.substr(SetPos.length +1).trim();
					
					ChangePosition(text);					
					if (text[0]*1==0){
						All.style.backgroundColor="black";
					}else{
						All.style.backgroundColor="rgba(0,0,0,0)";
					}
					break;
				case SetScale:
					scale=message.substr(SetScale.length +1)*1;
					if (isNaN(scale)){scale=1;}
					//Overlay.style.scale=scale; //Doesn't work in OBS
					Overlay.style.transform="scale("+scale+")";
					break;
				case SetColor:
					color1=message.substr(SetColor.length +1).split(" ")[0];
					color2=message.substr(SetColor.length +1).split(" ")[1];
					if (color1!="-"){
						Overlay.style.backgroundColor=color1;
					}
					if (color2!="-" && color2!=undefined){
						Overlay.style.color=color2;
					}
					break;
				case SetFont:
					font=message.substr(SetFont.length +1);
					if (isNaN(font*1)){
						//use exakt name
					}else{
						font=fontlist[font*1 -1];
					}
					Overlay.style.fontFamily=font+", Helvetica, sans-serif";
					test.style.fontFamily=font+", Helvetica, sans-serif";
					
					//Adjust image height to new line height
					AdjustImageHeight();
					break;
			}
		}
		//console.log(`${user['display-name']}: ${message}`);
	});
	</script>
</html>