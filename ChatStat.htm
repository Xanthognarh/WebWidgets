<!DOCTYPE html>
<!--
Config via URL-Parameters:
- `channel`: Name of Twitch Channel(s) you want to listen (also works for Shared Chat). Separate Channels with comma.
- `kernel`: Kernel of the KDE Plot. Choose one of [Normal, Epanechnikov, Box, Biweight, Triweight, Triangular]  [default: normal]
- `bg`: r,g,b,a value  for the background-color (0-255) and alpha (0-1) [default: white-transparent (230,230,255,0.8)]
- `axiscolor`: r,g,b,a value  for the axis-color (0-255) and alpha (0-1) [default: black (0,0,0,1)]
- `linecolor`: r,g,b,a value  for the line-color (0-255) and alpha (0-1) [default: black (0,0,0,1)]
- `fillcolor`: r,g,b,a value  for the fill-color (0-255) and alpha (0-1) [default: blue-transparent (50,50,255,0.5)]
- `hidden`: 0: Not hidden or 1: hidden when loading the page. Visibility can be changed by chat commands. [default=0]
- `debug`: Allow multiple votes per user and commands can be used by everyone
use them like: ChatStat.htm?channel=Testchannel&debug=1

TODO: !votetitle xxx
-->
<html>
	<header>
		<meta charset="UTF-8">
		<title>Xanthopoll</title>		
	</header>
	<script src="Scripts/tmi.min.js"></script>
	<style>
		body{
			margin:0;
		}
		#plot{
			width: 100%;
			height: 100%;
			position: absolute;
		}
		#canvas{
			width: 100%;
			height: 100%;
		}

	</style>
	<body>
		<div id="plot">
			<canvas id="canvas"></canvas>
		</div>
	</body>
	<script charset="utf-8">
		StartNewVoteCommand="!newvote";
		ResetCommand="!resetvote";//Alias for StartNewVoteCommand
		HideVoteCommand="!hidevote";
		ShowVoteCommand="!showvotekde";
		ResetBlocklistCommand="!voteagain";
		StopVoteCommand="!stopvote";
		StartVoteCommand="!continuevote";
		KernelCommand="!setkernel";
		hCommand="!seth";
		percentCommand="!setp";
		rangelimitCommand="!limit";
		TestCommand="!testdata";
		
		
		extraMods=[]; //only lower-case usernames (like in the url): extraMods=["name1","name2"];
	
		siteURL=new URL(window.location);
		TwitchChannel=siteURL.searchParams.get("channel").toLowerCase().split(",");
		kernel=siteURL.searchParams.get("kernel");
		if (kernel==null){kernel="normal";}
		bg=siteURL.searchParams.get("bg");
		if (bg==null){bg="230,230,255,0.8"}
		document.getElementById("canvas").style.background="rgba("+bg+")";
		bg2=siteURL.searchParams.get("bg2");
		if (bg2==null){bg2="220,220,240,0.8"}
		axcolor=siteURL.searchParams.get("axiscolor");
		if (axcolor==null){axcolor="0,0,0,1"}
		linecolor=siteURL.searchParams.get("linecolor");
		if (linecolor==null){linecolor="0,0,0,1"}
		fillcolor=siteURL.searchParams.get("fillcolor");
		if (fillcolor==null){fillcolor="50,50,255,0.5"}
		hidden=siteURL.searchParams.get("hidden");
		if (hidden*1==1){document.getElementById("plot").style.visibility="hidden"}
		bandwidth=siteURL.searchParams.get("bandwidth");
		if (bandwidth==null){bandwidth="auto"}
		percent=siteURL.searchParams.get("percent");
		minX=siteURL.searchParams.get("minX");
		maxX=siteURL.searchParams.get("maxX");
		if (percent==null){percent=100}
		debug=siteURL.searchParams.get("debug");
		if (debug!=null){
			debug=true;
		}else{
			debug=false;
		}

		
		
		/*
			Kernel
		*/
		function kernelNormal(x,μ=0,σ=1){
			return Math.exp(-1*(x-μ)**2/(2*σ**2))/(sqrt2PI*σ);
		}
		function kernelEpanechnikov(x){
			if (Math.abs(x)<1){
				return 0.75*(1-x**2);
			}else{
				return 0;
			}
		}
		function kernelBox(x){
			if (Math.abs(x)<1){
				return 0.5;
			}else{
				return 0;
			}
		}
		function kernelBiweight(x){
			if (Math.abs(x)<1){
				return 0.9375*(1-x**2)**2;
			}else{
				return 0;
			}
		}
		function kernelTriweight(x){
			if (Math.abs(x)<1){
				return 1.09375*(1-x**2)**3;
			}else{
				return 0;
			}
		}
		function kernelTriangular(x){
			if (Math.abs(x)<1){
				return (1-Math.abs(x));
			}else{
				return 0;
			}
		}
		
		/*
			Program
		*/
		
		votes=[];
		Userlist=[];
		allowvoting=true;
		const sqrt2PI=Math.sqrt(2*Math.PI);
		
		function shuffleArray(array){
			for (let i = array.length - 1; i > 0; i--) {
				const j = Math.floor(Math.random() * (i + 1));
				[array[i], array[j]] = [array[j], array[i]];
			}
		}
		
		testdata=[];
		function sendTestData(sleep=100){
			if (testdata.length>0){
				newvote(testdata.pop());
			}else{
				return true;
			}
			setTimeout(sendTestData,sleep);
		}
		function generateData(n=10,modes=2,maxvalue=100,r=2){
			if (n<0 && modes==2 && maxvalue==100 && r==2){
				let newtestdata=[];
				switch (n){
					case -1:
						newtestdata=[1,1,1,1,8,10,10,10,15,16,20,20,20,24,25,30,30,30,30,30,30,30,30,30,32,40,40,50,50,60,60,100,100,100,100,100,120,129,150,200,200,200,400,1500];
						break;
					case -2:
						newtestdata=[0,0,1,2,2.5,2.99,5,5,5,9.99,10,10,12,13.95,15,16,20,24.99,30,30,32.5,35,39.9,39.99,40,40,40,42,50,50,50,69,75.35,269,275,430,1000,5000,6969,7850];
						break;
					case -3:
						newtestdata=[0,1,1,1.59,3,7,10,10,10,12,13,15,15,20,20,25,30,30,30,30,30,30,30,30,40,40,40,40,40,42,42,42,42,42,42,42,42,42,42,42,42,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,69,75,80,100,100,100,100,100,100,100,100,100,100,100,100,100,200,400];
						break;
					case -4:
						newtestdata=[19,23,24,25,26,26,27,27,27,28,28,28,28,28,28,29,29,30,30,30,30,30,30,30,30,31,31,31,31,32,32,32,32,33,33,33,33,33,33,33,34,34,34,34,34,34,35,35,35,35,36,36,36,37,37,37,37,38,38,39,40,40,40,40,40,40,41,41,42,43,43,45,46,46,48,48,50,53,69];
						break;
					case -5:
						newtestdata=[1,1,1,2,3,7,10,14,14,17,22,40,47,50,50,55,55,60,69,69,69,70,70,70,70,73,75,75,75,78,79,80,80,80,80,80,80,80,81,83.7,85,86,89,90,90,90,90,90,95,95,96,96.2,97,100,100,100,100,100,100,101,105,105,105,108,110,110,110,110,111,112,112,115,115,115,118,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,121,121,121,121,122,123,123,123,123,123,123,123,125,125,130,130,130,130,130,130,132,132,132,134,134,135,135,136,138,140,140,140,140,140,140,140,140,140,144,145,145,145,145,146,147,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,151,151,152,154,155,155,155,156,157,160,160,160,160,160,165,165,165,168,169,169,169,170,170,170,170,175,175,175,175,175,175,175,175,178,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,184,186,186,187,187,187,187,189,189,190,190,190,190,190,200,200,200,200,200,200,200,200,200,200,200,201,203,204,206,206,208,210,210,210,210,210,210,210,210,211,220,220,220,220,220,220,220,220,220,221,222,222,222,225,225,230,230,230,240,240,240,240,244,247,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,256,256,260,260,260,260,269,270,270,270,270,270,275,275,280,280,280,280,280,280,283,285,290,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,301,301,301,301,301.8,302,302,302,302,302,302,302,302,302,302,302,302,302,303,305,305,305,310,312,320,320,320,320,320,324,325,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,352,352,355,360,360,360,360,360,369,370,375,378,378,380,400,400,400,400,400,400,400,402,420,420,420,420,420,420,450,450,450,450,450,450,456,491,500,500,500,500,500,500,500,500,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,700,700,700,700,700,788,800,800,800,800,800,828,848,1000,1000,1000,2800,20000,35000,50000,69000,100000,100000,100000000,1e+47];
						//301,8
						break;
					case -6:
						newtestdata=[0,0,0,0,1,1,1,1,1,1,2,2,3,3,3,3,3,3,3.1415,4,5,5,5,5,5,5,5,5,5,6,7,7,7,8,8,10,10,10,10,10,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,15,16,17,17,17,17,17,19,20,20,20,20,20,20,20,20,22,23,23,23,23,23,23,24,24,25,27,27,28,28,29,30,30,32,33,33,34,34,35,36,36,38,40,40,42,42,42,42,45,46,47,47,50,50,50,50,50,50,50,50,53,55,57,57,58,60,67,68,68,69,69,69,69,69,70,72,73,73,75,75,76,80,80,80,80,80,80,80,80,80,83,83,84,87,89,95,97,98,99,99,99,99,100,100,100,100,100,100,100,109,110,112,112,113,120,120,120,120,120,120,120,120,122,123,123,130,130,132,135,135,137,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,151,151,152,155,155,155,155,155,157,160,165,169,180,180,180,182,187,189,200,200,200,200,200,200,200,200,200,214,217,225,227,230,245,250,250,250,250,250,250,251.3,255,256,265,267,269,272,278,300,300,300,300,300,300,300,300,300,300,300,300,302,320,350,350,352,360,360,365,370,389,390,400,400,400,400,400,400,400,420,420,431,450,450,457,476,500,500,500,500,500,500,500,555,600,600,600,666,666,666,666,731,750,800,800,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1050,1100,1200,1200,1200,1200,1200,1257,1300,1500,1500,1546,1700,1800,1850,2000,2000,2000,2000,2120,2142,2300,2500,2568,3000,3000,3000,3000,3500,4000,4000,5000,5000,5599,7000,7000,7500,7860,8000,8000,8200,8500,8888,10000,10000,10000,10001,11000,12000,12000,12000,12000,12000,13000,13000,15000,15000,18000,19900,20000,23000,30000,50000,58000,70000,77777,100000,122678,130000,500000,7800000,100000000];
						//150
						break;
					case -7:
						newtestdata=[1,2,2,3,3,3,5,12,23,120,550,1201,2500,2500,3000,3000,3500,4000,5294,6666,7000,7400,7500,7650,8000,8900,9000,10000,11500,11820,12000,12000,12000,13000,15000,15000,20000,20000,20000,21500,23000,24000,25000,25000,26000,26000,27884,30000,30000,32000,34000,35000,35000,36000,36000,36413,37000,40000,45000,45674,47000,50000,50000,50000,50000,50000,50000,50000,50000,50090,55000,56500,60000,60000,62000,63790,64000,66000,70000,74000,74000,75000,79000,80000,80000,80000,85000,85000,85000,87000,90000,93050,98000,98000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100001,110000,112000,112300,115067,120000,120000,120000,120000,120000,120000,120000,120000,120000,120000,120000,120000,122000,123051,123456,123456,123751,125000,150000,150000,150000,150000,150000,150000,150000,150000,152000,160000,169000,170000,187000,200000,200000,200000,200000,200000,200000,220000,222222,225000,230000,234098,240000,250000,250000,250000,250000,250000,250000,280000,300000,300000,300000,300000,300000,300000,300000,300000,300000,345000,350000,350000,350000,356000,360000,360000,365000,365000,365000,365000,380000,400000,400000,400000,400000,420000,420000,440000,450000,450000,466000,500000,500000,500000,500000,500000,500000,500000,500000,500000,500000,500000,500000,500000,500000,520000,530000,550000,550000,555555,589841,590000,600000,600000,666666,694204,700000,700000,700000,700000,720000,720000,750000,750000,750000,750000,780000,800000,800000,800000,800000,800000,800000,800000,800000,850000,850000,860000,900000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000099,1200000,1200000,1200000,1200000,1200000,1200000,1200000,1200000,1212121,1234567,1300000,1300000,1300000,1300000,1300000,1500000,1500000,1750000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2300000,2300000,2500000,2500000,2500000,2500000,3000000,3000000,3000000,3600000,3800000,4000000,4000000,4000000,5000000,5000000,5000000,5000000,5000000,5000000,5500000,6000000,6545438,7000000,7000000,7000000,7400000,7800000,7800000,7800000,8000000,8000000,8000000,8000000,10000000,10000000,10000000,10000000,10000000,10000000,10000000,12000000,12400000,13000000,18000000,20000000,20000000,20000000,20000000,20000002,25000000,25000000,36500000,40000000,40000000,40000000,80000000,100000000,100000000,123000000,230000000,999999999,4000000000,12000000000,2222222222222,6665555556665,50000000000000];
						//7804180
						break;
					case -8:
						newtestdata=[0.8,1.27,1.5,2,2.3,2.6,2.8,3,3,3,3,3,3,3,3.5,4,4,4,4,4,4,4,4,4,4.5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6.7,7,7,7,7,7,7.9,8,8,8,8,8,8,8,8,8,8,9,9,9.7,10,10,10,10,11,11,11.5,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13.8,14,15,15,15,15,15,15,15,15,16,17,17,17,17,17,18,18,18,18,18,19,19,19,19,20,20,20,20,20,20,20,20,20,20,21.5,22,22,22,22,22,22,22,22,22,22,23,23,23,23,23,23,24,24,24,25,25,25,25,25,25,26,27,28,29,29,29.25,30,30,30,30,30,30.5,31,31,32,32,32,33,33,34,34,34,35,35,35,35,35,35,36,36,36,38,38,39,40,40,40,40,40,40,40,40,40,42,42,42,43,43,44,44,45,45,45,45,45,45,46,46,47,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,51,52,52,52,53,53,54,55,55,55,55,55,55.5,56,56,56,58,58,59,59,59,60,60,60,60,60,60,60,60,60,60,60,60,60,62,62,63,63,63,64,64,65,65,65,65.5,66,66.5,67,68,68,69,69,69,69,70,70,70,70,70,70,70,70,70,70,70,71,72,75,75,75,78,80,80,80,80,80,80,82,85,86,89,90,90,93,93,100,100,100,100,100,100,100,111,111,112,112,112,112,120,120,120,120,120,120,120,120,120,120,120,120,120,120,121,122,122,122,123,123,130,132,135,140,145,150,150,150,150,150,156,180,186,187,187,200,200,200,200,200,200,207,213,222,240,242,245,250,250,250,250,256,258,270,280,287,300,300,300,300,300,300,320,350,350,350,400,400,402,420,442,450,500,500,500,500,500,500,600,600,600,680,725,750,753,800,852,860,900,1000,1000,1000,1000,1200,1212,1800,2000,2000,3200,5000,5000,10000,11000];
						//56,76
						break;
					case -9:
						newtestdata=[1,4.444,80,100,250,360,400,420,448,450,451,453,480,500,500,500,500,500,532,567,570,600,600,600,623,666,675,685,700,712,750,750,750,750,750,750,753,765,798,800,800,800,876,900,900,956,960,979,1000,1000,1000,1010,1087,1087,1100,1100,1100,1120,1200,1200,1200,1200,1200,1200,1200,1200,1250,1250,1280,1300,1337,1337,1347,1350,1350,1400,1400,1400,1400,1500,1500,1500,1500,1500,1500,1500,1500,1500,1500,1500,1530,1570,1600,1600,1600,1690,1700,1736,1750,1750,1800,1800,1800,1800,1800,1800,1800,1840,1850,1890,1900,1976,1980,1999,2000,2000,2000,2000,2000,2000,2000,2100,2100,2100,2100,2150,2200,2200,2200,2265,2300,2300,2333,2345,2345,2400,2400,2400,2400,2400,2400,2400,2450,2460,2500,2500,2500,2500,2500,2500,2500,2500,2500,2500,2500,2500,2500,2500,2500,2500,2500,2500,2500,2500,2500,2500,2500,2500,2595,2600,2600,2600,2633,2645,2669,2700,2700,2700,2700,2738,2750,2758,2780,2800,2800,2800,2800,2800,2800,2828,2870,2888,2900,3000,3000,3000,3000,3000,3000,3000,3000,3000,3000,3000,3000,3000,3000,3000,3000,3000,3000,3000,3001,3019,3020,3020,3020,3021,3200,3200,3200,3210,3213,3250,3300,3300,3400,3400,3431,3472,3472,3500,3500,3500,3500,3500,3500,3500,3500,3500,3500,3500,3500,3500,3500,3500,3500,3500,3500,3500,3500,3520,3542,3545,3560,3600,3600,3600,3600,3600,3600,3600,3600,3666,3700,3700,3743,3800,3800,3800,3867,3900,4000,4000,4000,4000,4000,4000,4000,4000,4200,4234,4300,4300,4300,4400,4500,4500,4500,4500,4500,4500,4600,4600,4750,4775,4792,4823,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5200,5200,5300,5300,5300,5300,5300,5337,5338,5338,5338,5338,5338,5338,5338,5338,5338,5338,5338,5338,5338,5400,5500,5500,5500,5500,5538,5550,5600,5638,5700,5790,5800,5879,5883,5883,6000,6000,6000,6000,6000,6000,6000,6000,6000,6000,6000,6321,6400,6421,6500,6500,6900,6900,6900,6969,7000,7000,7000,7300,7500,7500,7500,7523,7676,7800,8000,8000,8000,8000,8000,8000,8000,8000,8500,8679,8900,9000,9000,9000,9680,10000,10000,10000,10000,10000,10000,11000,12000,12000,12500,12600,13000,14000,15000,15000,15000,15000,15000,20000,20000,20000,24000,25000,25000,25000,25000,43000,70000,78000,85000,95360,100000,100000,111111,120000,150000,200000,13000000,100000000000000000];
						//5338
						break;
					case -10:
						newtestdata=[1,5,6,12,12,50,50,50,55,60,60,60,67,67,69,70,70,70,72,75,75,75,75,75,75,75,75,75,75,77,78,78,80,80,80,80,80,80,80,80,80,80,80,80,85,85,85,85,85,85,85,86,87,87,87,87,87,88,88,88,88,89,89,89,89,89,89,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,91,92,92,92,92,92,92,92.3,93,93,93,94,94,94,94,94,94,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98.9,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,101,110,110,120,120,150,150,200,777,1000,2000];
						//96,47(50mL+50mL)
						break;
					case -11:
						newtestdata=[1,1,1,2,3,10,12,12,16,17,22.5,69,80,250,1212,5000,7500,9000,10000,10000,12000,15000,16000,16000,16345,17000,20000,20000,23000,25000,25000,25000,25000,27999,28000,28000,30000,30000,30000,30000,33333,35000,35000,35000,35000,35000,35000,36000,36000,37000,37000,43333,45000,45000,47000,48999,50000,50000,50000,50000,60000,60000,60000,60000,60000,60000,63000,65000,65000,65000,68000,68000,69000,69000,70000,73000,75000,75000,75000,75000,75000,75000,78000,80000,80000,87000,88888,90000,90000,90000,90000,98883,99999,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100050,105321,115000,120000,120000,120000,120000,120000,120000,120000,120000,120000,120000,120000,120000,120000,125000,125000,130000,135064,147000,150000,150000,150000,150000,150000,150000,150000,153620,170000,175000,180000,180000,180000,185669,189556,195000,200000,200000,200000,200000,200000,200000,210000,230000,234000,240000,245000,250000,250000,250000,250000,250000,250000,250000,250000,250000,250000,250000,250000,250000,280000,300000,300000,300000,300000,300000,300000,300000,300000,300000,309000,344555,350000,350000,350000,360000,360000,360000,360000,360000,368000,378000,397000,400000,400000,400000,420000,420000,420000,420000,420000,450000,500000,500000,500000,500000,500000,500000,500000,500000,500000,500000,500001,500099,550000,600000,600000,600000,600000,620000,700000,700000,700000,750000,750000,800000,800000,800000,800000,800000,800000,800000,800000,800000,800000,821000,850000,850000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1200000,1200000,1200000,1200000,1200000,1200000,1200000,1200000,1200000,1200000,1200000,1299888,1300000,1350000,1500000,1500000,1500000,1500000,1500000,1800000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2000000,2300000,2300000,2300000,2500000,2500000,2500000,2800000,3200000,3500000,3600000,3600000,3750523,4000000,4000000,4206969,4500000,5000000,5000000,5000000,5000000,5000000,5000000,5000000,5000000,5000000,5000000,5000000,5000000,5000000,5120000,5555555,6000000,6000000,6485162,6900000,6900000,6900000,6969696,7000000,7200000,9999999,9999999,10000000,10000000,10000000,10000000,10000000,11000000,12000000,12000000,12000000,12500000,13000000,14000000,15000000,15000000,15000000,16000000,18038045,23000000,25000000,25000000,30000000,33000000,33333333,50000000,50000000,60000000,60000000,65000000,70000000,100000000,100000000,100000000,100000000,120000000,120000000,200000000,400000000,500000000,1000000000,1000000000,5000000000,3000000000000,10000000000000000000,1e+21];
						//204788
						break;
					case -12:
						newtestdata=[1,30,40,63,66,100,150,220,243,286,300,300,310,320,330,333,333,340,345,350,360,360,360,360,360,360,370,375,378,380,380,400,400,400,400,400,417,420,420,420,420,420,420,420,420,420,420,420,422,430,430,430,437,450,450,460,475,500,500,500,500,525,560,583,600,600,600,600,600,600,600,600,600,626,630,634,657,660,688,700,700,700,712,750,755,780,800,800,800,800,800,800,800,800,800,800,800,812,890,900,900,900,900,900,950,969,999,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1024,1024,1090,1100,1120,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1235,1250,1250,1300,1300,1300,1300,1320,1400,1400,1500,1500,1500,1500,1500,1500,1500,1500,1500,1578,1599,1600,1600,1750,1800,1800,2000,2000,2000,2000,2100,2100,2100,2150,2200,2300,2400,2400,2400,2500,2500,2500,2500,2500,2500,3000,3000,3000,3000,3000,3000,3000,3000,3000,3000,3000,3000,3000,3000,3000,3000,3000,3000,3000,3000,3100,3175,3200,3500,3500,3500,3500,3500,3500,3500,3600,3600,3600,3600,3800,3999,4000,4000,4000,4000,4000,4000,4000,4000,4342,4500,4500,4500,4700,4700,4700,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,6000,6000,6000,6000,6969,7000,7000,7000,7420,7420,7800,7809,8000,8000,8000,8000,8000,8000,8000,8700,9000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,12000,12000,12000,12000,12000,12000,12000,12000,12000,12000,12000,12121,13000,14000,15000,15000,15000,15000,15000,15000,16000,16000,16738,18000,18000,18000,20000,20000,20000,20000,20000,20000,20000,20000,20000,22000,22000,23000,23000,23000,24000,25000,25000,25000,25000,26000,27000,27000,28000,28000,28400,28800,29000,30000,30000,30000,30000,30000,30000,30000,30000,30000,32000,32000,36000,36000,36000,40000,40000,40000,44444,45000,50000,50000,50000,50000,50000,50000,53000,70000,80000,100000,100000,120000,150000,250000,250000,270000,290000,300000,390000,900000,10000000000000];
						//28000
						break;
					case -13:
						newtestdata=[0,1,2,3,9,12,12,13,14,42,42,50,60,75,80,90,120,120,173,200,200,250,300,300,340,372,400,400,405,420,450,500,512,650,666,700,700,720,756,760,775,788,800,800,800,842,850,900,960,980,999,1000,1000,1000,1000,1100,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1234,1250,1250,1256,1300,1337,1337,1450,1469,1500,1500,1500,1500,1500,1500,1500,1500,1500,1500,1600,1600,1700,1800,1800,1825,1897,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2120,2200,2222,2300,2400,2400,2456,2500,2500,2500,2500,2500,2500,2500,2537,2700,2712,3000,3000,3000,3000,3000,3000,3000,3000,3000,3000,3012,3213,3333,3355,3400,3500,3500,3500,3587,3600,3600,3650,3784,4000,4000,4000,4000,4000,4000,4000,4000,4296,4500,4738,4863,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5200,5314,5600,5677,5678,6000,6000,6000,6000,6000,6333,6666,7000,7000,7000,7000,7200,7500,7500,7895,8000,8000,8000,8000,8000,8500,8746,8763,9000,9000,9000,9000,9999,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,11000,11111,11111,11800,12000,12000,12000,12000,12000,12000,12000,12000,12000,12000,12000,12000,12345,12357,13000,13567,13598,15000,15000,15000,15000,15000,15000,15000,15000,15000,15001,15603,17538,20000,20000,20000,20000,20000,20000,20000,20000,20000,20000,21000,21345,22000,22222,24000,24421,25000,25000,25000,25000,25000,25000,25000,25000,25000,25000,28000,29000,30000,30000,30000,30000,30000,30000,30000,31000,31254,33333,35000,35000,36000,36000,36000,36500,36500,36500,37000,40000,40000,40000,42000,42000,42000,50000,50000,50000,50000,50000,50000,50000,50000,50000,50000,50090,59000,60000,60000,60000,60000,68000,70000,70000,75000,75000,75000,75000,75000,76000,77000,80000,80000,80000,80000,80000,80000,80000,80000,80000,80000,80000,80000,80000,80000,80000,80000,80000,80000,80000,80000,80100,84000,86548,87000,90000,100000,100000,100000,100000,100000,100000,100000,100000,100000,120000,120000,120000,125000,150000,165983,182500,200000,200000,200000,250000,250000,250000,300000,333333,450000,500000,500000,513987,600000,800000,999999,999999,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1200000,1235467,1500000,14000000,320000000,30000000000000,1e+21];
						//75000
						break;
					case -14:
						newtestdata=[1,2,2,10,11,12,12,12,12,22,25,27,28,30,30,35,40,40,42,50,50,53,60,60,60,69,70,75,75,82,89,90,97,99,99,100,100,100,100,100,100,100,100,112,120,120,120,150,150,150,150,150,150,150,150,155,160,175,197,200,200,200,200,200,200,200,200,200,200,200,200,200,200,211,222,222,225,230,234,250,250,250,250,250,250,250,250,250,256,270,280,300,300,300,300,300,300,300,300,300,300,300,333,350,350,350,355,360,360,360,360,360,366,385,400,400,400,400,400,400,400,400,400,400,400,400,400,400,400,400,420,420,450,450,450,450,456,458,470,482,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,550,582,590,600,600,600,600,600,608,634,650,666,666,666,680,680,700,700,700,700,725,740,750,750,750,750,751,777,790,800,800,800,800,800,800,800,800,800,900,900,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1111,1200,1200,1200,1200,1200,1250,1250,1250,1378,1452,1500,1500,1500,1500,1500,1500,1500,1600,1750,1800,1900,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2500,2500,2500,2500,2500,2500,3000,3000,3000,3000,3000,3000,3000,3000,3000,3000,3000,3480,3500,3500,3500,3500,3600,4000,4000,4000,4000,4000,4000,4000,4000,4000,4200,4200,4200,4320,4500,5000,5000,5000,5000,6000,6000,6000,7000,7500,8000,8000,9000,9000,9500,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,12000,12000,12345,12500,12500,12500,15000,15000,15000,15484,16000,20000,20000,20000,20000,20000,20000,20000,20000,20000,20000,20000,25000,25000,25000,25000,25000,25000,25000,25000,25000,26000,29000,30000,30000,30000,30000,36000,42000,50000,66874,80000,80000,90000,100000,100000,100000,100000,100000,120000,120000,139000,159749,200000,250000,260000,287000,350000,400000,500000,500000,1000000,5555555,25000000,360000000,2500000000];
						//25000
						break;
					case -15:
						newtestdata=[1,1,2,3,12,12,12,12,12,12,12,12,20,30,40,50,55,68,74,77,80,80,80,89,90,91,95,99,100,109,109,110,111,112,112,120,120,120,120,120,120,120,120,120,120,120,120,128,130,130,132,135,140,143,144,150,150,150,150,150,150,150,152,154,160,180,180,190,199,200,200,200,200,200,200,200,200,200,200,200,200,200,200,205,210,210,210,215,220,220,222,222,222,222,225,225,225,227,230,230,230,234,240,240,240,240,240,240,240,240,244,244,245,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,252,258,260,260,260,268,270,275,275,280,280,280,280,290,292,292,293,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,301,308,312,320,320,320,320,320,320,325,333,333,333,335,342,345,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,351,355,356,360,360,360,360,360,360,360,362,362,364,365,365,365,365,365,365,365,367,367,367,367,367,370,370,370,370,370,370,370,374,374,375,378,380,380,380,380,380,380,380,382,388,390,390,397,397,397,398,399,399,400,400,400,400,400,400,400,400,400,400,400,400,400,400,400,400,400,400,400,400,400,400,400,400,400,400,400,400,400,400,400,400,400,401,407,412,414,419,420,420,420,420,420,420,420,420,420,420,425,430,430,430,432,450,450,450,450,450,450,450,450,450,450,450,450,450,452,456,460,467,480,480,480,480,480,490,490,490,496,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,512,512,530,543,549,550,560,580,600,600,600,600,600,625,650,650,666,666,667,690,690,700,700,700,700,700,713,734,734,734,734,750,767,800,800,800,800,800,800,850,860,900,900,1000,1000,1000,1049,1050,1150,1200,1200,1200,1200,1200,1200,1200,1200,1200,1212,1213,1234,1234,1400,1450,1500,1500,1700,2000,2000,2400,3000,3000,3500,3500,3500,3500,5872,7000,8000,10000,13000,99999999999];
						//397
						break;
					case -16:
						newtestdata=[0,0,0,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,16,16,16,18,18,18,18,24,30,30,60,69,99,100,200,360,100000000,50000000000];
						//14 von 15 Gebäuden
						break;
					case -17:
						newtestdata=[1,1,1,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,15,15,15,15,15,16,16,17,17,17,17,17,17,17,17,18,18,18,19,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,21,21,21,22,22,22,22,22,22,22,22,22,22,22,23,23,24,24,25,25,25,25,25,25,25,26,27,27,28,29,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,31,32,32,33,33,34,34,34,34,35,35,35,35,35,35,35,35,35,36,36,40,40,40,40,40,40,40,42,42,43,43,43,44,45,45,45,45,45,46,47,48,48,48,48,48,48,49,50,50,50,50,50,55,55,57,57,60,63,65,65,70,72,80,81,82,89,90,100,100,100,111,112,120,122,128,144,173,200,355,1200,66666,10348748];
						//30
						break;
					case -18:
						newtestdata=[0.2,1,1,1,1,1.25,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3.6,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5.5,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,12,12,12,12,12,12,12,12,12,12,12,13,13,13,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,16,16,17,17,17,17,17,17,17,18,18,18,18,18,18,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,21,21,22,22,22,22,22,22,23,24,24,24,24,25,25,25,25,25,25,25,25,27,27,28,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,31,32,33,33,35,35,35,35,36,39,40,40,40,40,40,42,42,42,42,42,42,42,42.69,44,45,45,45,45,45,45,45,45,45,46,49,49,50,50,50,50,50,50,54,55,55,55,55,58,58,60,60,60,60,60,60,66,68,69,69,70,75,75,80,80,80,88,90,90,90,100,100,100,100,100,113,120,120,120,120,122,123,125,130,135,137,150,150,150,150,150,150,165,176,180,180,180,200,200,200,200,200,240,245,250,250,265,300,300,300,300,300,314,350,360,360,360,365,365,365,365,387,420,500,500,500,500,700,700,712,730,800,800,10000];
						//14
						break;
					case -19:
						newtestdata=[1,1,2,3,3,3,3,5,5,5,6,7,7,7,7,8,8,8,9,9,9,9,10,10,10,10,10,10,10,10,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,14,14,15,15,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,18,18,18,18,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,22,22,22,23,23,23,23,23,23,24,24,24,24,24,24,24,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,28,28,28,28,28,28,28,28,28,29,29,29,29,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,31,31,32,32,32,32,32,32,32,32,32,32,32,32,32,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,34,34,34,34,34,34.69,35,35,35,35,35,35,35,35,35,35,35,35,36,36,36,36,37,37,37,38,38,38,38,39,40,40,40,40,40,40,40,40,40,40,41,41,42,42,42,42,42,42,43,43,44,44,44,44,44,45,45,45,45,45,45,45,47,47,48,48,48,48,48,48,50,50,50,50,50,50,50,50,50,50,50,50,52,53,55,60,60,64,65,65,66,67,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,75,75,75,79,80,80,80,120,600,1000,1212];
						//27
						break;
					case -20:
						newtestdata=[0,0,0.5,1,1,2,4,4,5,5,5,5,5,5,7,7,8,8,8,8,8,8,8,9,9,9,10,10,10,10,10,10,10,10,10,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,13,13,14,14,14,14,14,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,16,16,18,18,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20.5,21,22,22,23,23,23,23,24,25,25,25,25,25,25,25,25,25,25,25,25,25,27,27,28,29,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,31,31,33,33,34,34,34,35,35,35,35,35,35,35,35,35,35,36,37,38,40,40,40,40,40,40,40,40,40,40,40,40,42,43,45,45,45,45,45,45,45,45,45,45,45,45,45,45,47,47,47,47,50,50,50,50,50,55,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,61,64,65,69,69.42,70,70,70,77,80,80,80,80,82,83,90,90,90,90,90,90,90,90,90,90,90,90,90,90,93,95,100,100,100,100,109,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,121,123,123,126,135,146,150,150,150,150,175,180,180,180,180,180,180,180,180,180,180,180,187,190,190,200,200,200,200,200,200,203,210,220,224,236,240,240,240,240,240,240,240,250,250,250,280,300,300,300,300,300,300,300,300,300,300,300,320,320,360,360,360,360,360,360,360,360,400,400,420,480,480,500,500,500,500,500,500,600,600,600,600,600,720,800,900,10000,100000000,99999999999999,9.9898999999999e+35];
						//12
						break;
					case -21:
						newtestdata=[-100000,1,1,1,2,2,2,2,2,3,4,5,8,10,12,15,20,23,30,40,42,45,50,50,70,75,90,90,100,128,128,150,200,200,200,222,250,250,275,300,300,300,333,340,350,350,350,360,360,375,400,400,400,400,400,400,420,420,450,456,480,480,500,500,500,500,500,500,500,500,500,500,500,550,550,577,598,600,600,600,620,640,650,650,666,669,678,696,700,700,700,749,750,750,750,750,750,767,789,792,800,800,800,800,800,800,870,900,999,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1111,1132,1200,1200,1200,1230,1250,1250,1250,1250,1337,1337,1500,1500,1500,1500,1500,1500,1500,1500,1500,1500,1500,1599,1700,1800,1800,1800,1800,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2100,2200,2200,2450,2500,2500,2500,2500,2500,2714,2734,2750,3000,3000,3000,3000,3000,3000,3000,3000,3000,3000,3200,3337,3400,3500,3500,3500,3600,3786,4000,4000,4000,4000,4000,4200,4200,4200,4200,4351,4500,4500,4500,4500,4800,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5367,5555,5555,5618,6000,6500,6800,6969,7050,7500,7500,7500,7676,8000,8000,8400,8520,8888,9000,9841,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10234,11564,12000,12000,12000,12000,13000,14758,15000,15000,15000,15000,15000,15000,15000,15000,15000,15000,15000,15000,15000,16000,18000,18000,18000,20000,20000,20000,20000,20000,20000,20000,20000,20000,22000,22000,24659,25000,25000,25000,26000,28000,30000,30000,30000,30000,34098,35000,35000,36000,40000,40000,40000,44000,45000,50000,50000,50000,50000,50000,50000,50000,60000,60564,69000,75000,80000,80000,80000,80000,80000,100000,120000,120000,120000,144447,150000,150000,150000,150000,200000,200000,202500,250000,250000,300000,340000,450000,487000,500000,750000,750000,750000,800000,1000000,1000000,1000000,1500000,1500000,3000000,10000000,15000000,15000000,40000000,10000000000000000];
						//80000
						break;
					case -22:
						newtestdata=[1,1,1,2,10,10,15.6,25,53.112,120,187,223,223,228.859,265,340,348,400,420,420,562,600,627,650,650,750,900,1000,1150,1200,1250,1298,1337,1337,1447,1500,1600,1738,1800,1876,2000,2000,2116,2199,2231,2345,2400,2500,2500,2500,2500,2511,2548,2680,2875,3000,3000,3250,3400,3400,3479,3500,3600,3600,3600,4000,4000,4000,4000,4500,4560,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5300,5300,5300,5600,6000,6000,6500,6500,6666,6758,7000,7500,7500,7500,7500,7600,8000,8000,8000,8000,8000,8000,8150.3,8469,8600,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,11111,12000,12000,12000,12000,12000,12000,12000,12000,12000,12000,12340,12345,12500,13000,13000,13000,13000,13337,13500,13569,14000,14000,14000,14000,14200,14300,14500,14670,14999,15000,15000,15000,15000,15000,15000,15000,15000,15000,15000,15000,15000,15000,15000,15650,16000,16700,16745,17000,17000,18000,18000,18000,18237,18300,20000,20000,20000,20000,20000,20000,20000,20000,20000,20000,21000,21000,21500,23000,24000,24000,24811,24995,25000,25000,25000,25000,25000,25000,25000,25000,25000,25000,25000,25000,25000,25000,25000,25000,26000,27000,27585,30000,30000,30000,30000,30000,30000,30000,30000,30000,30000,32000,32758,34000,35000,35000,35000,35000,35000,36000,36000,36000,37000,37253,37500,38000,38000,40000,40000,40000,40000,40000,40000,42000,43000,45000,45000,45000,47000,47555,48000,50000,50000,50000,50000,50000,50000,50000,50000,50000,50000,50000,50000,50000,51000,52000,57000,58000,60000,60000,60000,60000,65000,66000,68000,69000,69000,75000,78451,80000,84500,86650,95000,99000,100000,100000,100000,100000,100000,117000,120000,120000,125000,130000,133000,140000,150000,150000,150000,190000,200000,200000,200000,200000,200000,200000,200000,200000,225000,227000,228800,228859,228859,228859,228859,228900,230000,230000,230000,230000,250000,250000,250000,250000,250000,250000,260000,270000,300000,300000,300000,300000,300000,300000,320000,350000,400000,420000,500000,500000,500000,500000,500000,600000,600000,619000,740000,900000,956321,1000000,1234567,1300000,1800000,2000000,2500000,3000000,3000000,3500000,4000000,5000000,5000000,5000000,5000000];
						//227631
						break;
					case -23:
						newtestdata=[0.005,0.4,0.5,0.5,1,1,1,1,1,1,1,1.2,1.5,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3.4,3.5,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4.2,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5.1,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8.1337,8.7,9,9,9,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12.5,12.7,13,13,13,13,13,13,13,13,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,17,17,18,18,19,19,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,21,21,21,21,22,22,22,23,24,24,25,25,25,25,25,25,26,26,27,28,30,30,30,30,30,30,30,30,32,32,32,33,34,35,35,35,37,40,40,40,42,42,43,45,45,45,45,45,45,47,47,50,50,52,54,55,57,60,60,60,61,64,65,66,66,70,70,78,90,100,120,150,160,168,180,180,180,200,222,300,847,1800,50000];
						//16,88 min
						break;
					case -24:
						newtestdata=[0.000001,0.001,0.02,0.05,0.1,0.2,0.2,0.3,0.3,0.45,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.6,0.66,1,1,1,1,1,1,1,1,1,1.2,1.337,1.5,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2.7,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4.5,4.5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,12,12,12,12,12,12,13,13,13,13.8,14,15,15,15,15,15,15,15,15,15.6,16,16,16,17,17,17,17,17,18,18,18,20,20,20,20,20,20,20,20,21,21,21,21,21,22,22,22,22,22,22,23,23,23,23,24,24,24,24,24,25,25,25,25,25,25,27,27,27.1337,28,30,30,30,30,30,30,30,32,33,34,35,36,36,36,40,40,40,41,42,42,42,42,44,44,44,45,45,45,46,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,52,54,56,58,58,59,60,60,60,60,65,66,66,69,69,69,76,76,79,80,80,80,80,82,85,85,85,87,87,87,87,93,96,99,100,100,100,100,100,100,107,112,112,120,120,132,145,147,148,150,150,150,150,150,150,150,154,160,180,200,200,200,200,217,222,250,250,250,250,256,300,300,309,350,350,400,420,421,500,500,500,500,600,778,1300,2000,6400,10000];
						//10ct
						break;
					case -25:
						newtestdata=[1,2,5,5,5,7,7,7,10,55,57,60,66,350,450,500,500,500,550,567,800,800,865,878,1200,1500,1700,1800,2000,2000,2354,2500,2500,2500,2600,2680,2860,3000,3000,3000,3200,3500,3700,3700,4096,4500,4567,5000,5000,5000,5000,5000,5000,5000,5000,5000,5600,5600,6000,6666,7000,8000,8600,9800,9999,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,11000,12000,12345,12500,12548,13535,14000,15000,17900,18000,18000,18000,18000,18110,18110,20000,20000,20000,20000,20000,20000,20000,20000,20000,24000,25000,25000,25000,25000,25800,29988,30000,30000,34567,36000,40000,40000,42000,42000,42000,43000,44000,45000,45000,45000,45000,47861,50000,50000,50000,50000,50000,50000,50000,50000,50000,50000,50000,50000,50000,50000,50000,50000,50000,50000,52000,60000,60000,60000,60000,60154,65000,65789,70000,70058,75000,85000,86538,95000,97000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,110000,120000,120000,132546,136000,150000,181100,200000,233333,250000,250000,250000,250000,250000,250000,250000,250000,250000,280000,280000,283893,300000,321562,360360,365000,369791,400000,420420,450000,453300,500000,500000,500000,500000,500000,500000,500000,500000,500000,500000,500000,500000,500000,500000,500009,550000,567000,600000,654000,678569,750000,800000,800000,800000,878000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1100000,1234567,1484000,1700000,1830029,2000000,2500000,3000000,3000000,3000000,3456671,3700000,5000000,5000000,5000000,5000000,6000000,6000000,10000000,25000000,30000000,51830029,60000000,60000000,69696969,76767676,100000000,100000000,100000000,157654221,250000000,349000000,555555555,999999999,999999999,1000000000,1000000000,3545343564,43000000000,6e+23];
						//18110 Gbit/s
						break;
					default:
						return false;
						break;
				}
				shuffleArray(newtestdata);
				testdata.push.apply(testdata,newtestdata);
				sendTestData();
				return true;
			}
			if (n<1 || modes<1){return false;}
			for (let i=0;i<n;i++){
				newvote(Number(Math.round(Math.random()*maxvalue/modes + Math.round((modes-1)*Math.random())*maxvalue/modes +"e"+r)+"e-"+r));
			}
		}
		
		function newvote(vote){
			//Insert vote to sorted votes
			let min = 0;
			let max = votes.length;
			let index = Math.floor(max*0.5);
			while (max > min) {
				if (vote < votes[index]) {
					max = index;
				} else {
					min = index + 1;
				}
				index = Math.floor((min + max)*0.5);
			}
			votes.splice(index, 0, vote);

			console.log(votes);
			update({kernel_type: kernel});
		}
		function update(options={}){
			let h=options.bandwidth || bandwidth;
			if (isNaN(h)){h=null;}
			let filter_percent=options.percent*1 || percent*1;
			let kernel_type=options.kernel_type || kernel;
			let MinLimit=options.MinLimit || minX;
			let MaxLimit=options.MaxLimit || maxX;
			
			const resolution=document.getElementById("canvas").clientWidth/1;
			if (filter_percent>100 || filter_percent<0){filter_percent=100;}
			filter_percent=100-filter_percent;
			const skip=Math.floor(votes.length*filter_percent*0.005);
			let min=votes.at(skip);
			let max=votes.at(-skip-1);
			console.log("Real min="+min+" max="+max);
			min=min-(max-min)*0.01;
			max=max+(max-min)*0.01;
			if (MinLimit!=null){min=Math.max(MinLimit,min);}
			if (MaxLimit!=null){max=Math.min(MaxLimit,max);}
			console.log("Min:"+min+" Max:"+max);
			
			const stepsize=(max-min)/resolution;
			
			//calculate h if not given
			if (h==null || h<=0){				
				let mean=0;
				for (i=skip;i<votes.length-skip;i++){
					mean+=votes.at(i);
				}
				mean=mean/(votes.length-2*skip);
				console.log("mean="+mean);
				let value=0;
				for (i=skip;i<votes.length-skip;i++){
					value+=(votes.at(i)-mean)**2;
				}
				const σ=Math.sqrt(value/(votes.length-2*skip));
				let IQR;
				//votes.at(index starts with 1)
				if (0.25*votes.length==Math.round(0.25*votes.length)){
					IQR=0.5*(votes.at(votes.length*0.75)+votes.at(votes.length*0.75 +1)) - 0.5*(votes.at(votes.length*0.25)+votes.at(votes.length*0.25 +1));
				}else{
					IQR=Math.floor(votes.at(votes.length*0.75+1)) - Math.floor(votes.at(votes.length*0.25+1));
				}
				h=1.06*Math.min(σ,IQR/1.34)*(votes.length-2*skip)**(-0.2);
				console.log("h="+h+" (calculated)");
				if (h>0.05*(max-min)){h=Math.min(4,(max-min)*0.02);console.log("h="+h+" (limited)");}
				if (h==0){h=(max-min)*0.0001;}
				h=1/h;
			}else{
				console.log("h="+h+" (fixed)");
				h=1/h;
			}
			
			KDE=[];
			X=[];
			ymax=0;
			switch(kernel_type.toLowerCase()){
				case "normal":
					kernel_type=kernelNormal;
					break;
				case "epanechnikov":
					kernel_type=kernelEpanechnikov;
					break;
				case "box":
					kernel_type=kernelBox;
					break;
				case "biweight":
					kernel_type=kernelBiweight;
					break;
				case "triweight":
					kernel_type=kernelTriweight;
					break;
				case "triangular":
					kernel_type=kernelTriangular;
					break;
				default:
					kernel_type=kernelNormal;
			}
			for (x=min;x<max;x+=stepsize){
				X.push(x);
				value=0;
				for (i=0;i<votes.length;i++){
					value+=kernel_type((x-votes[i])*h);
				}
				value=Math.max(0,value*h/votes.length);
				KDE.push(value);
				if (value>ymax){ymax=value;}
			}
			plot(X,KDE,min,max,ymax);
		}
		
		function plot(X,Y,min,max,ymax){
			console.log(arguments);
			const minSciExp=6;//Lowest |Exponent| to use scientific notation
			const SciExp=Math.min(minSciExp, Math.max(Math.abs(min.toExponential(2).split("e")[1]), Math.abs(max.toExponential(2).split("e")[1])))
			const c=document.getElementById("canvas");
			const ctx=c.getContext("2d");
			const mx=c.clientWidth;
			const my=c.clientHeight;
			c.width=mx;
			c.height=my;
			ctx.font = "48px serif";
			let metrics = ctx.measureText("0123456789e");
			const fontHeight = metrics.actualBoundingBoxAscent + metrics.actualBoundingBoxDescent;
			metrics = ctx.measureText("0."+"8".repeat(SciExp));
			const p=Math.min(mx,my)*0.01;
			const TickWidth=metrics.width+2*p;
			ctx.clearRect(0,0,mx,my);
			
			//Background percentil
			ctx.fillStyle="rgba("+bg2+")";
			//ctx.fillStyle="rgba(255,0,0,1)";
			let oldvalue=0;
			
			console.log(votes.join("\t"));
			j=0;
			for (i=0.1;i<=0.9;i+=0.1){
				i=i.toFixed(2);
				if (Number.isInteger(votes.length*i)){
					value=votes[votes.length*i];
				}else{
					value=0.5*(votes[Math.floor(votes.length*i)]+votes[Math.ceil(votes.length*i)]);
				}
				//console.log(i+": "+value);
				if (j%2==0){
					ctx.fillRect(oldvalue*mx/(max-min),0,(value-oldvalue)*mx/(max-min),my);
					//console.log("Gezeichnet");
				}
				
				oldvalue=value;
				i*=1;
				j+=1;
			}
			
			//Axes
			//ctx.fillText("0123456789e",0,my-1*p);
			ctx.strokeStyle="rgba("+axcolor+")";
			ctx.fillStyle="rgba("+axcolor+")";
			ctx.fillRect(0,my-fontHeight-2*p-0.5*fontHeight,mx,0.5*p);
			
			let n=Math.floor(mx/TickWidth)-1;
			[z,e]=(max-min).toExponential(2).split("e");
			ea=Math.abs(e*1);
			let tickstep=max-min;
			let tickstart=min;
			let tickround=1;
			let tickcount=0;
			if (z[0]*20+z[2]*2+Math.ceil(z[3]*0.1)<=n){
				//x.05, x.05, x.05,...
				tickstep=Number("0.05e"+e);
				tickround=2;
				tickstart=Math.floor(min*20)*0.05;
				tickcount=z[0]*20+z[2]*2+Math.ceil(z[3]*0.1)+1;
			}else if (z[0]*10+z[2]*1<=n){
				//x.1, x.2, x.3,...
				tickstep=Number("0.1e"+e);
				tickround=1;
				tickstart=Math.floor(min*10)*0.1;
				tickcount=z[0]*10+z[2]*1+1;
			}else if (z[0]*5+Math.ceil(z[2]*0.5)<=n){
				//x.0, x.2, x.4, ...
				tickstep=Number("0.2e"+e);
				tickround=1;
				tickstart=Math.floor(min*5)*0.2;
				tickcount=z[0]*5+Math.ceil(z[2]*0.5)+1;
			}else if (z[0]*2+Math.ceil(z[2]*0.1)<=n){
				//x.0, x.5
				tickstep=Number("0.5e"+e);
				tickround=1;
				tickstart=Math.floor(min*2)*0.5;
				tickcount=z[0]*2+Math.ceil(z[2]*0.1)+1;
			}else if (z[0]*1<=n){
				//1, 2, 3, ...
				tickstep=Number("1e"+e);
				tickround=0;
				tickstart=Math.floor(min);
				tickcount=z[0]*1+1
			}else {
				tickstep=(max-min)/n;
				tickround=2;
				tickcount=n;
			}
			
			i=1;
			//First and last Tick is skipped
			for(pos=tickstart+tickstep;pos<=max;pos+=tickstep){
				tick=Number(pos.toExponential(tickround));
				ctx.fillRect((tick-min)*mx/(max-min)-0.1*p, my-fontHeight-2*p,0.2*p+0.5,-0.5*fontHeight);
				textwidth=ctx.measureText(tick).width;
				ctx.fillText(tick,(tick-min)*mx/(max-min)-0.5*textwidth,my-1*p);
				i++;
			}
			
			//Plot XY
			posxaxis=my-fontHeight-2*p-0.5*fontHeight;
			yscale=(posxaxis-1.5*fontHeight-2*p)/ymax;
			ctx.strokeStyle="rgba("+linecolor+")";
			ctx.fillStyle="rgba("+fillcolor+")";
			ctx.beginPath();
			ctx.moveTo(0,posxaxis)
			
			for (i=0;i<X.length;i++){
				ctx.lineTo(i,posxaxis-yscale*Y[i]);
			}
			ctx.lineTo(mx,posxaxis);
			ctx.closePath();
			ctx.stroke();
			ctx.fill();
			
			//Find local maxima
			ctx.strokeStyle="rgba("+axcolor+")";
			ctx.fillStyle="rgba("+axcolor+")";
			let maxY=[];
			let maxX=[];
			for (i=1;i<X.length-1;i++){
				if (Y[i-1]<Y[i] && Y[i]>=Y[i+1]){
					maxY.push(Y[i]);
					maxX.push(X[i]);
					ctx.fillRect((X[i]-min)*mx/(max-min)-0.1*p,posxaxis-yscale*Y[i]+0.25*fontHeight,0.1*p,-0.5*fontHeight);
					
				}
			}
			
			//Remove local maxima to close for text
			const minDistanceMaxima=(TickWidth-2*p)*(max-min)/mx;
			i=1;
			while (i<maxY.length-1){
				if (maxX[i]-maxX[i-1] < minDistanceMaxima && maxX[i+1]-maxX[i] < minDistanceMaxima){
					if (maxY[i]==Math.max(maxY[i-1],maxY[i],maxY[i+1])){
						//Use middle, if equal or greater
						maxX.splice(i+1,1);
						maxY.splice(i+1,1);
						maxX.splice(i-1,1);
						maxY.splice(i-1,1);
					}else if (maxY[i-1]==Math.max(maxY[i-1],maxY[i],maxY[i+1])){
						//Use left
						maxX.splice(i,2);
						maxY.splice(i,2);
					}else{
						//Use right
						maxX.splice(i-1,2);
						maxY.splice(i-1,2);
					}
					i--;
				}else if (maxX[i]-maxX[i-1] < minDistanceMaxima){
					if (maxY[i-1]>=maxY[i]){
						//use left
						maxX.splice(i,1);
						maxY.splice(i,1);
					}else{
						//use right
						maxX.splice(i-1,1);
						maxY.splice(i-1,1);
					}
				}else{
					i++;
				}
			}
			
			//Write the maxima
			const maxvalue=Math.max(...maxY);
			ctx.font = "36px serif";
			for (i=0;i<maxX.length;i++){
				if (maxX[i]<1 && maxX[i]>-1){
					value=maxX[i].toFixed(2);
				}else if (Math.abs(maxX[i].toExponential(0).split("e")[1])>=minSciExp){
					value=maxX[i].toExponential(2);
				}else{
					value=maxX[i].toFixed(1);
				}
				
				textwidth=ctx.measureText(value).width;
				if (maxY[i]==maxvalue){
					ctx.font="bold 36px serif";
				}else{
					ctx.font = "36px serif";
				}
				ctx.fillRect((maxX[i]-min)*mx/(max-min)-0.2*p,posxaxis-yscale*maxY[i]+0.25*fontHeight,0.4*p,-p-0.5*fontHeight);
				ctx.fillText(value,(maxX[i]-min)*mx/(max-min)-0.5*textwidth,posxaxis-yscale*maxY[i]-p-0.5*fontHeight)
			}
		}
		plot([0,1],[1,5],0,1,5);
		
		
		//a=setInterval(function(){generateData(1,4,1000,2)},100)
		//clearInterval(a)
		
		
		//Connect to Twitchchat:
		const client = new tmi.Client({
			options: { debug: false },
			channels: TwitchChannel
		});
		client.connect().catch(console.error);
		client.on('message', (channel, user, message, self) => {
		// "Alca: Hello, World!"
		let vote=message.replace(",",".").replace(/[€$]/g, "");
		if (allowvoting && !isNaN(vote)){
			//Message is a valid vote format
			if (!Userlist.includes(user['display-name']) || debug){
				newvote(vote*1);
				Userlist.push(user['display-name']);
			}
				
		}else{
			if (user.mod || extraMods.includes(user['display-name'].toLowerCase()) || TwitchChannel.includes("#"+user['display-name'].toLowerCase()) || debug){
				//Authorised Users (Twitch Mods, extraMods, Broadcaster or in case of debug-mode: everyone)
				message+=" ";
				switch (message.split(" ")[0]){
					case StartNewVoteCommand:
						if (message.split(" ")[1].toLowerCase()!="kde"){document.getElementById("plot").style.visibility="hidden"; break;}
						document.getElementById("plot").style.visibility="visible";
						//no break
					case ResetCommand:
						//Reset Votes
						votes=[];
						//Reset Userlist
						Userlist=[];
						update();
						break;
					case TestCommand:
						werte=message.split(" ");
						if (werte.length>1 && werte[1]!=""){n=werte[1]*1;}else{n=10;}
						if (werte.length>2 && werte[2]!=""){m=werte[2]*1;}else{m=2;}
						if (werte.length>3 && werte[3]!=""){x=werte[3]*1;}else{x=100;}
						if (werte.length>4 && werte[4]!=""){r=werte[4]*1;}else{r=2;}
						generateData(n,m,x,r);
						break;
					case KernelCommand:
						kernel=message.split(" ")[1].toLowerCase();
						update();
						break;
					case hCommand:
						bandwidth=message.split(" ")[1].replace(",",".");
						update();
						break;
					case percentCommand:
						percent=message.split(" ")[1].replace(",",".");
						update();
						break;
					case HideVoteCommand:
						document.getElementById("plot").style.visibility="hidden";
						break;
					case ShowVoteCommand:
						document.getElementById("plot").style.visibility="visible";
						break;
					case StopVoteCommand:
						allowvoting=false;
						break;
					case StartVoteCommand:
						allowvoting=true;
						break;
					case ResetBlocklistCommand:
						Userlist=[];
						break;
					case rangelimitCommand:
						werte=(message.split(" ")[1]+"-").split("-");
						if (werte[0].trim()==""){
							minX=null;
						}else{
							minX=werte[0]*1;
						}
						if (werte[1].trim()==""){
							maxX=null;
						}else{
							maxX=werte[1]*1;
						}
						update();
						break;
				}
			}
			
		}
		//document.getElementById("Chatlog").innerHTML+=`<br><b>${user['display-name']}</b>: ${message}`;
		//console.log(`${user['display-name']}: ${message}`);
	});
	</script>
</html>
